/**
 * generator-cg-gas - Yeoman Generator for Enterprise Angular projects, with Gulp Angular Sass
 * @version v3.3.4
 * @link https://github.com/Lunatic83/generator-cg-gas
 * @license 
 */
!function(){function configure($urlRouterProvider,$locationProvider){$locationProvider.html5Mode({enabled:!1,requireBase:!1}),$urlRouterProvider.otherwise("/")}function runBlock($rootScope){$rootScope.safeApply=function(fn){var phase=$rootScope.$$phase;"$apply"===phase||"$digest"===phase?fn&&"function"==typeof fn&&fn():this.$apply(fn)}}angular.module("tsp",["ui.bootstrap","ui.utils","ui.router","ngAnimate","ngResource","templates","tsp.main"]).config(configure).run(runBlock),configure.$inject=["$urlRouterProvider","$locationProvider"],runBlock.$inject=["$rootScope"]}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("modules/main/directive/graph/graph.html",'<div id="graph-workspace">\n\n\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("modules/main/partial/index/index.html",'<div class="row">\n    <div class="col-lg-12">\n        <h1>Solve TSP with firefly solver</h1>\n\n        <div class="row">\n            <div class="col-lg-12">\n                <form class="form-horizontal">\n                    <div class="form-group">\n                        <label for="fCount" class="col-sm-2 control-label">Firefly count:</label>\n\n                        <div class="col-sm-10">\n                            <input type="number" class="form-control" id="fCount"\n                                   ng-model="vm.parameters.number_of_individuals">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label for="fCount2" class="col-sm-2 control-label">Number of cities:</label>\n\n                        <div class="col-sm-10">\n                            <input type="number" class="form-control" id="fCount2"\n                                   ng-model="vm.parameters.number_of_cities">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label for="fFactorAlpha" class="col-sm-2 control-label">Factor &alpha;:</label>\n\n                        <div class="col-sm-10">\n                            <input type="number" class="form-control" id="fFactorAlpha" ng-model="vm.parameters.alpha">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label for="fFactorBeta" class="col-sm-2 control-label">Factor &beta;:</label>\n\n                        <div class="col-sm-10">\n                            <input type="number" class="form-control" id="fFactorBeta" ng-model="vm.parameters.beta">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label for="fFactorGamma" class="col-sm-2 control-label">Factor &gamma;:</label>\n\n                        <div class="col-sm-10">\n                            <input type="number" class="form-control" id="fFactorGamma" ng-model="vm.parameters.gamma">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label for="fIterationsCount" class="col-sm-2 control-label">Iterations count:</label>\n\n                        <div class="col-sm-10">\n                            <input type="number" class="form-control" id="fIterationsCount"\n                                   ng-model="vm.parameters.iterations">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="col-sm-offset-2 col-sm-10 text-center">\n                            <button type="submit" class="btn btn-default" ng-click="vm.run()">Run It</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n        </div>\n        <div class="row">\n            <div class="col-lg-12">\n                <graph nodes="vm.nodes"></graph>\n            </div>\n        </div>\n    </div>\n\n</div>\n')}])}(),function(){angular.module("tsp.main",["ui.bootstrap","ui.utils","ui.router","ngAnimate"]),angular.module("tsp.main").config(["$stateProvider",function($stateProvider){$stateProvider.state("main",{url:"/",templateUrl:"modules/main/partial/index/index.html",controller:"IndexCtrl",controllerAs:"vm"})}])}(),function(){function IndexCtrl(SolverService){function run(){SolverService.run(vm.parameters,function(data){vm.nodes=data.route,startPolling(data.id)})}function startPolling(id){var interval=setInterval(function(){SolverService.state({id:id},function(data){vm.nodes=data.route,data.done===!0&&clearInterval(interval)})},100)}var vm=this;vm.run=run,vm.parameters={number_of_individuals:25,alpha:1,beta:1,gamma:1,iterations:200,number_of_cities:20},vm.nodes=[{x:100,y:100},{x:200,y:230},{x:90,y:129},{x:100,y:220},{x:79,y:100}]}angular.module("tsp.main").controller("IndexCtrl",IndexCtrl),IndexCtrl.$inject=["SolverService"]}(),function(){function SolverService($resource){return $resource("/:type/:id",{},{run:{method:"POST",isArray:!1,params:{type:"run"}},state:{method:"GET",isArray:!1,params:{type:"state"}}})}angular.module("tsp.main").factory("SolverService",SolverService),SolverService.$inject=["$resource"]}(),function(){function GraphDirective(){return{restrict:"E",replace:!0,scope:{nodes:"=nodes"},templateUrl:"modules/main/directive/graph/graph.html",link:function($scope,element,attrs,fn){function tick(){path.attr("d",function(d){var sourceX=10*Number(d.source.x),sourceY=10*Number(d.source.y),targetX=10*Number(d.target.x),targetY=10*Number(d.target.y);return"M"+sourceX+","+sourceY+"A0,0 0 0,1 "+targetX+","+targetY})}function createLinks(nodes){var current,last,links=[];return _.forEach(nodes,function(node){void 0==current?current=node:(last=current,current=node,links.push({source:last,target:current}))}),links.push({source:current,target:nodes[0]}),links}var path,circle,width=$("#graph-workspace").width(),height=$("#graph-workspace").height(),svg=d3.select("#graph-workspace").append("svg:svg").attr("width",width).attr("height",height);svg.append("svg:defs").selectAll("marker").data(["suit","licensing","resolved"]).enter().append("svg:marker").attr("id",String).attr("viewBox","0 -5 10 10").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5"),$scope.$watch("nodes",function(nodes){var links=createLinks(nodes);void 0!=path&&path.remove(),void 0!=circle&&circle.remove(),path=svg.append("svg:g").selectAll("path").data(links).enter().append("svg:path").attr("class",function(d){return"link "+d.type}),circle=svg.append("svg:g").selectAll("circle").data(nodes).enter().append("svg:circle").attr("r",6).attr("cx",function(d){return 10*Number(d.x)}).attr("cy",function(d){return 10*Number(d.y)}),tick()},!0)}}}angular.module("tsp.main").directive("graph",GraphDirective)}();
//# sourceMappingURL=data:application/json;base64,